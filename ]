var express = require('express'),
    app = express(),
    http = require('http'),
    server = http.createServer(app),
    io = require('socket.io').listen(server),
    port = process.env.PORT || 3000;

server.listen(port);

var hosturl = "127.0.0.1";

//routs
app.use('/client', express.static(__dirname + '/client'));

app.get('/', function (req, res) {
  res.sendfile(__dirname + '/client/index.html');
});

app.get(/^\/room\/([0-9a-zA-z]+)/, function(req, res){
  res.sendfile(__dirname + '/client/gameRoom.html');
});

//mongodb setting
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/snakeBattle');

var db = mongoose.Connection,
    Schema = mongoose.Schema;

var UserNameSchema = new Schema({
    name:String
});
var UserNameModel = mongoose.model('UserName',UserNameSchema);

var RoomSchema = new Schema({
    roomId:String,
    roomMember:[],
    snakesData:[]
});
var RoomModel = mongoose.model('Room', RoomSchema);

var boxSize = [50, 50];   //[w, h]for test

//to sove clash problem
var queryQueue = {
  setName: [],
  creatRoom: [],
  findRoom: [],
  remove: function(data, set){
    var index = this[set].indexOf(data);
    if (index != -1){
      this[set].splice(index, 1);
    }
  }
}

var RegExps = {
  idVerify: /^[0-9a-zA-Z_]{1,12}$/
};

//=================================================================================================================
//clesr rooms in db when start the server
RoomModel.find({}, function(err, doc){
    console.log("i:" + doc.length);
    for (var i in doc){
      console.log("find all:" + doc[i].id);
      doc[i].remove();
      console.log("remov all:" + doc[i].id);
    }
    console.log("DB clean!!");
});
//================================================================================================

//clear names in db when start the server
function cleanDbUser(){
  UserNameModel.find({}, function(err, results){
    if(results.length){
      for (var i in results){
        console.log(results[i]);
        var name = results[i].name;
        console.log(name);
        results[i].remove(function(n){
          return function(){
            console.log(n + " been remove");
          }
        }(name));
      }
    }
  });
}
cleanDbUser();

//warning messages
var messages = {
  wrapper : function(tag, cla, conten){
    return "<" + tag + " class=\"" + cla + "\">" + conten + "</" + tag +">";
  },
  setMessage : function(name, cla, message){
    this[name] = this.wrapper("div", cla, message);
  }
}
messages.setMessage("busy", "warning", "Busy, please try again later.");
messages.setMessage("registered", "warning", "Already registered, please pick anotherone.");
messages.setMessage("error", "warning", "Error, try again.");
messages.setMessage("needName", "warning", "Please set a name first.");
messages.setMessage("illegal", "warning", "You can only use numbers, letters, and underscores here (1-12).");
messages.setMessage("exitFirst", "warning", "You are in a room now, Please exit first.");
messages.setMessage("notExist", "warning", "RoomId does not exist.");
messages.setMessage("roomFull", "warning", "Sorry, the room is full.");
messages.setMessage("stateError", "warning", "Illegal state.");

//socket.state: 0 in the beginning, 1 after setname, 2 after belong some room, 3 for ready, 4 for playing
//write a middleware for some socket listenner latter?
io.sockets.on('connection', function(socket){

  socket.busy = false;
  socket.state = 0;

  socket.on('setName', function(data){
    if(socket.busy){
      socket.emit("warning",{$: "#name-warning",
                             message: messages.busy,
                             busy:true});
      return;
    }
    if (socket.state > 0){
      socket.emit("warning", {$: "#name-warning",
                              message: messages.stateError});
      return;
    }
    if(queryQueue.setName.indexOf(data) != -1){
      socket.emit("warning", {$: "#name-warning",
                              message: messages.busy});
      return;
    }
    //verification && clash test
    if(data && RegExps.idVerify.test(data)){
      queryQueue.setName.push(data);
      socket.busy = true;
      UserNameModel.findOne({'name': data + ''},function(err, result){
      if(result){
        console.log("name" + data + "is Already registered");
        socket.emit("warning", {$: "#name-warning",
                                message: messages.registered});
        socket.busy = false;
        queryQueue.remove(data, 'setName');
        }else{
          gameOperations.newName(data, socket);
        }
      });
    }else{
        socket.emit("warning", {$: "#name-warning",
                                message: messages.illegal});
    }
  });

  socket.on('creatRoom', function(data){
    if(socket.busy){
      socket.emit("warning",{$: "#roomId-warning",
                             message: messages.busy,
                             busy:true});
      return;
    }
    if(socket.state < 1){
      socket.emit("warning", {$: "#roomId-warning",
                              message: messages.needName});
      return;
    }
    if(socket.state > 1){
      socket.emit("warning", {$:"#roomId-warning",
                              message: messages.exitFirst});
      return;
    }
    if(queryQueue.creatRoom.indexOf(data) != -1){
      socket.emit("warning",{$: "#roomId-warning",
                             message: messages.busy});
      return;
    }
    if(data && RegExps.idVerify.test(data)){
      queryQueue.creatRoom.push(data);
      socket.busy = true;
      RoomModel.findOne({'roomId': data + ''}, function(err, result){
        if(result){
          console.log("roomId" + data + "is Already registered");
          socket.emit("warning", {$: "#roomId-warning",
                                  message: messages.registered});
          socket.busy = false;
          queryQueue.remove(data, 'creatRoom');
        }else{
          gameOperations.newRoom(data, socket);
        }
      });
    }else{
      socket.emit("warning", {$: "#roomId-warning",
                              message: messages.illegal});
    }
  });

  socket.on('joinRoom', function(data){
    if(socket.busy){
      socket.emit("warning",{$: "#roomId-warning",
                             message: messages.busy,
                             busy:true});
      return;
    }
    if(socket.state < 1){
      socket.emit("warning", {$: "#roomId-warning",
                              message: messages.needName});
      return;
    }
    if(socket.state > 1){
      socket.emit("warning", {$:"#roomId-warning",
                              message: messages.exitFirst});
      return;
    }
    if(queryQueue.findRoom.indexOf(data) != -1){
      socket.emit("warning",{$: "#roomId-warning",
                             message: messages.busy});
      return;
    }
    if(data && RegExps.idVerify.test(data)){
      queryQueue.findRoom.push(data);
      socket.busy = true;
      RoomModel.findOne({'roomId': data + ''}, function(err, result){
        if(result){
          if(result.roomMember.length >= 4){
            socket.emit("warning", {$: "#roomId-warning",
                                    message: messages.roomFull});
            socket.busy = false;
            queryQueue.remove(data, 'findRoom');
          }else{
            gameOperations.joinRoom(result, socket);
          }
        }else{
          socket.emit("warning", {$: "#roomId-warning",
                                  message: messages.notExist});
          socket.busy = false;
          queryQueue.remove(data, 'findRoom');
        }
      });
    }else{
      socket.emit("warning", {$:"#roomId-warning",
                              message: messages.illegal});
    }
  });

  socket.on('ready', function(){
    if(socket.busy){
      socket.emit("warning",{$: "#roomId-warning",
                             message: messages.busy,
                             busy:true});
      return;
    }
    if(socket.state != 2){
      return;
    }
    if(socket.ready){
      return;
    }
    UserNameModel.findById(socket.nameId, function(err, result){
      console.log("find that ready id: " + result.name);
    });
  });

});

var setting = {
  //
}

//newName, newRoom, joinRoom, snakesDataInit, exitRoom, roomInit Operation
var gameOperations = {
  newName: function(name, socket){
    var newName = new UserNameModel({'name': name});
    newName.save(function(err){
      if(!err){
        socket.name = name;
        socket.nameId = newName.id;
        socket.state = 1;
        console.log(name + " join the game, id:" + newName.id);
        socket.emit("setNameSuccess", {$: "#name-warning",
                                       message: name});
      }else{
        socket.emit("warning",{$: "#name-warning",
                               message: messages.error});
      }
      socket.busy = false;
      queryQueue.remove(name, 'setName');
    });
  },
  
  newRoom: function(id, socket){
    var newRoom = new RoomModel({'roomId': id,
                                 'roomMember': [socket.name],
                                 'snakesData': this.snakesDataInit(boxSize[1])});
    newRoom.save(function(err){
      if(!err){
        socket.join(id);
        socket.roomId = id;
        socket.state = 2;
        console.log(socket.name + " creat room " + id + ".");
        socket.emit("creatRoomSuccess", {$: "#roomId-warning",
                                         message: [id, socket.name]});
      }else{
        socket.emit("warning", {$: "#roomId-warning",
                                message: messages.error});
      }
      socket.busy = false;
      queryQueue.remove(id, 'creatRoom');
    });
  },

  joinRoom: function(room, socket){
    room.roomMember.push(socket.name);
    room.save(function(err){
      if(!err){
        var roomId = room.roomId;
        socket.join(roomId);
        socket.roomId = roomId;
        socket.state = 2;
        console.log(socket.name + " join room " + roomId + ".");
        socket.emit("joinRoomSuccess", roomId);
        io.sockets.in(roomId).emit("roomMember", room.roomMember);
      }else{
        socket.emit("warning", {$: "#roomId-warning",
                                message: messages.error});
      }
      socket.busy = false;
      queryQueue.remove(roomId, 'findRoom');
    });

  },

  snakesDataInit: function(n){
    var arr = [];
    for (var i = 0; i < n; i++){
      arr[i] = [];
    }
    return arr;
  }

}

//snake{"id", "color", len, "dir", head, data, counter, target}  snakes{id:{},id:{}}  build each game
//foods[[x,y],[x,y],[x,y]...] build each game
//snakesMap[{1:id, 2:id...},{},{}...]  build each game
function snakeStep (snakes) {
  var deads = [],
      foods = [],
      snakesMap = [];
  setTarget(snakes);
  clearOverBounds(snakes, boxSize);
  clearWeaker(snakes);
  setCounter(snakes);
}

//figure out each snake`s next step, according to head and direction
function setTarget (snakes) {
  var snake;

  for(var id in snakes){
    if (snakes.hasOwnProperty(id)){
      snake = snakes[id];
      switch (snake.dir){
        case 'w':
          snake.target = [snake.head[0], snake.head[1] - 1];
          break;
        case 's':
          snake.target = [snake.head[0], snake.head[1] + 1];
          break;
        case 'a':
          snake.target = [snake.head[0] - 1, snake.head[1]];
          break;
        case 'd':
          snake.target = [snake.head[0] + 1, snake.head[1]];
          break;
      }
    }
  }
}

//Bounds test (boxSize for testing)
function clearOverBounds(snakes, boxSize){ 
  var snakeTarget;

  for (var id in snakes){
    if (snakes.hasOwnProperty(id)){
      snakeTarget = snakes[id].target;
      if(snakeTarget[0] < 0 || snakeTarget[1] < 0 || snakeTarget[0] > boxSize || snakeTarget[1] > boxSize){
        delete snakes[id];
      }
    }
  }
}

//when at least two snakes have same target, only keep the strongest one
function clearWeaker (snakes){
  var ids = [];
  for (var id in snakes){
    if (snakes.hasOwnProperty(id))
    ids.push(id);
  }
  
  for (var i = ids.length - 1; i > 0; i--){
    var si = snakes[ids[i]];
    for (var j = i - 1; j > -1; j--){
      var sj = snakes[ids[j]];
      if (si.target[0] === sj.target[0] && si.target[1] === sj.target[1]){
        var comparator = si.len - sj.len;
        if(comparator > 0){
          delete snakes[ids[j]];
        }else if(comparator < 0){
          delete snakes[ids[i]];
        }else {
          delete snakes[ids[j]];
          delete snakes[ids[i]];
        }
      }
    }
  }
}

//when snakes about to eat food
function setCounter(snakes){
  for (var id in snakes){
    if (snakes.hasOwnProperty(id)){
      if (isFood(snakes[id].target)){
        snakes[id].counter ++
      }
    }
  }
}

//figure out if there is a food in the Coordinate
function isFood(coordinate){
  for(var i = foods.length - 1; i > -1; i--){
    var food = foods[i];
    if(food[0] === coordinate[0] && food[1] === coordinate[1]){
      return true;
    }
  }
  return false;
}

//when snakes about to hit on another snake
//not done yet
function clearClash (snakes, snakesMap){
  for(var id in snakes){
    if (snakes.hasOwnProperty(id)){
      var snake = snakes[id];
      var coordinate = snake.target;
      var clashId = snakesMap[ coordinate[0] ][ coordinate[1] + "" ]
      var clashSnake = snakes[clashId];
      if (clashId){
        var headOrTail = whichPart();  //true for h, false for t
        if (headOrTail){
          clashHead();
        }else{
          clashTail();
        }
      }
    }
  }

  //figure out which part of snake the coordinate belong to
  function whichPart (){
    var head = clashSnake.head;
    var tail = clashSnake.data[clashSnake.len - 1];
    if (coordinate[0] === head[0] && coordinate[1] === head[1]){
      return true;
    }else if (coordinate[0] === tail[0] && coordinate[1] === tail[1]){
      return false;
    }else{
      delete snakes[id]
    }
  }

  //
  function clashHead () {
    var clash = {w:"s", s:"w", a:"d", d:"a"};
    if (clash[snake.dir] === clashSnake.dir){
      var comparator = snake.len - clashSnake.len;
      if (comparator > 0){
        delete snakes[clashId];
      }else if (comparator < 0){
        delete snakes[id];
      }else{
        delete snakes[clashId];
        delete snakes[id];
      }
    }else{
      delete snake[id];
    }
  }
  
  function clashTail () {
    if (clashSnake.counter > 0){
      delete snake[id];
    }
  }

}

function buildSnake(id, color, len, dir, head, data, counter, target){
  var snake = {id:id, color:color, len:len, dir:dir, head:head, data:data};
  return snake;
}

function buildFoods (maxNumber) {}

function cleanFoods (coordinate, foods) {}

//clean snakesMap when some snake was delete
function cleanSnake (id, snakesMap) {}

function init(ids){
}
